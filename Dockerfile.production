# Stage 1: PHP Dependency Builder
FROM php:8.3-fpm-alpine AS php_builder
WORKDIR /app
RUN apk add --no-cache libzip-dev zip postgresql-dev
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer
COPY composer.json composer.lock ./
RUN composer install --no-interaction --no-dev --optimize-autoloader --no-scripts
COPY . .

# --------------------------------------------------------------------

# Stage 2: Frontend Asset Builder
FROM node:22-alpine AS node_builder
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm install
COPY . .
RUN npm run build

# --------------------------------------------------------------------

# Stage 3: Final Production Image
FROM php:8.3-fpm-alpine AS final
WORKDIR /var/www/html

# Install dependencies, compile extensions, and clean up in a single layer
RUN apk add --no-cache \
        nginx supervisor postgresql-libs mariadb-client libzip \
    && apk add --no-cache --virtual .build-deps \
        $PHPIZE_DEPS libzip-dev mariadb-dev postgresql-dev \
    && docker-php-ext-install pdo_mysql pdo_pgsql zip \
    && apk del .build-deps

# Copy dependencies and assets from builder stages
COPY --from=php_builder /app/vendor ./vendor
COPY --from=node_builder /app/public/build ./public/build

# Copy application source code
COPY app ./app
COPY bootstrap ./bootstrap
COPY config ./config
COPY database ./database
COPY public ./public
COPY resources/views ./resources/views
COPY routes ./routes
COPY storage ./storage
COPY artisan ./artisan

# Set proper permissions for Laravel
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 775 /var/www/html/storage \
    && chmod -R 775 /var/www/html/bootstrap/cache

# Copy Nginx and Supervisord configurations
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Expose port 80 for web traffic
EXPOSE 80

# Start Supervisord to manage both Nginx and PHP-FPM
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
