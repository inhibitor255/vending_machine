# Stage 1: PHP Dependency Builder
FROM php:8.3-fpm-alpine AS php_builder

WORKDIR /app

# Install system dependencies for PHP extensions
RUN apk add --no-cache libzip-dev zip postgresql-dev

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy only composer files to leverage Docker cache
COPY composer.json composer.lock ./
# Install production dependencies and optimize autoloader
RUN composer install --no-interaction --no-dev --optimize-autoloader

# --------------------------------------------------------------------

# Stage 2: Frontend Asset Builder
FROM node:20-alpine AS node_builder

WORKDIR /app

# Copy only package files to leverage Docker cache
COPY package.json package-lock.json ./
RUN npm install

# Copy source and build assets
COPY . .
RUN npm run build

# --------------------------------------------------------------------

# Stage 3: Final Production Image
FROM php:8.3-fpm-alpine AS final

WORKDIR /var/www/html

# Install necessary system packages for runtime (NGINX, Supervisord, etc.)
# We also need the runtime libs for the PHP extensions
RUN apk add --no-cache \
    nginx \
    supervisor \
    libzip \
    postgresql-libs

# Install PHP extensions
RUN docker-php-ext-install pdo_mysql pdo_pgsql zip

# Copy composer dependencies from the builder stage
COPY --from=php_builder /app/vendor ./vendor

# Copy built frontend assets from the node builder stage
COPY --from=node_builder /app/public/build ./public/build

# Copy application source code (only what's needed)
COPY app ./app
COPY bootstrap ./bootstrap
COPY config ./config
COPY database ./database
COPY public ./public
COPY resources/views ./resources/views
COPY routes ./routes
COPY storage ./storage
COPY artisan ./artisan

# Run Laravel optimization commands for production
RUN php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Set proper permissions for Laravel
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 775 /var/www/html/storage \
    && chmod -R 775 /var/www/html/bootstrap/cache

# Copy Nginx and Supervisord configurations
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Expose port 80 for web traffic
EXPOSE 80

# Start Supervisord to manage both Nginx and PHP-FPM
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
